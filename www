var express = require("express");
var path = require("path");
var compression = require("compression");
var request = require("request");

var Common = require("./bin/Common");
var Weather = require("./bin/Weather");

var app = express();
app.use(compression());

/* At the top, with other redirect methods before other routes */
// redirect to https
if (process.env.PORT) {
    app.get('*', function (req, res, next) {
        if (req.headers['x-forwarded-proto'] != 'https')
            res.redirect('https://WeatherMapTW.herokuapp.com' + req.url)
        else
            next() /* Continue to other routes if we're not redirecting */
    });
}

app.get(["/api/:name", "/api/:name/*"], function (req, res) {
    var functionName = req.params.name.toLowerCase();
    var query = req.query;
    Common.logWithDatetime("start", functionName, JSON.stringify(query));
    if (functionName && Weather[functionName]) {
        var openDataUrl = Weather[functionName](query, function (err, result) {
            if (err) {
                res.writeHead(400, {
                    "Content-Type": "application/json; charset=utf-8"
                });
                res.end(JSON.stringify(err));
                Common.logWithDatetime("error", functionName, JSON.stringify(query));
            } else {
                res.writeHead(200, {
                    "Content-Type": "application/json; charset=utf-8"
                });
                res.end(JSON.stringify(result));
                Common.logWithDatetime("done", functionName, JSON.stringify(query));
            }

        });
    } else {
        res.writeHead(400, {
            "Content-Type": "application/json; charset=utf-8"
        });
        res.send(JSON.stringify({ "success": false, "message": "wrong parameter" }));
        Common.logWithDatetime("wrong parameter", functionName, JSON.stringify(query));
    }
});

//proxy
app.get(["/:name"], function (req, res) {
    var name = req.params.name.toLowerCase();
    //var query = req.query;
    if (name == "proxy" && req.url.indexOf("proxy?") > -1) {
        var url = req.url.replace("/proxy?", "");
        Common.logWithDatetime("proxy", url);
        req.pipe(request({
            url: url,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.134 Safari/537.36'
            }
        })).on('error', function (err) {
            console.log('Error piping request object to request(): ', err);
            res.writeHead(404);
            res.end();
        }).pipe(res).on('error', function (err) {
            console.log('Error piping response from request() to response object : ', err);
            res.writeHead(404);
            res.end();
        });
    }
});

app.use(express.static(path.join(__dirname, 'public'), { maxAge: 43200000 }));

//catch 404 and forward to error handler
app.use(function (req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

var server = app.listen((process.env.PORT || 3312), function () {
    var host = server.address().address;
    var port = server.address().port;
    Common.logWithDatetime("service start", host, port);
});